{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport update from '../utility';\nconst initialState = {\n  error: null,\n  loading: false,\n  getAllPhrases: []\n};\n\nconst deleteStart = (state, action) => {\n  return update(state, {\n    loading: true\n  });\n};\n\nconst deleteSuccess = (state, action) => {\n  return update(state, {\n    loading: false,\n    deleted: action.data.createdAt\n  });\n};\n\nconst deleteFailed = (state, action) => {\n  return update(state, {\n    loading: false,\n    error: action.err\n  });\n};\n\nconst putPhraseStart = (state, action) => {\n  return update(state, {\n    loading: true\n  });\n};\n\nconst putPhraseSuccess = (state, action) => {\n  return update(state, {\n    loading: false,\n    putPhrase: action.data.createdAt,\n    id: action.data._id\n  });\n};\n\nconst getAllPhrases = (state, action) => {\n  return update(state, {\n    loading: false,\n    getAllPhrases: action.data.getPhrase\n  });\n};\n\nconst putPhraseFailed = (state, action) => {\n  return update(state, {\n    loading: false,\n    error: action.err\n  });\n};\n\nconst phrase = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.PUT_PHRASE_START:\n      return putPhraseStart(state, action);\n\n    case actionTypes.PUT_PHRASE_SUCCESS:\n      return putPhraseSuccess(state, action);\n\n    case actionTypes.GET_PHRASE_SUCCESS:\n      return getAllPhrases(state, action);\n\n    case actionTypes.PUT_PHRASE_FAILED:\n      return putPhraseFailed(state, action);\n\n    case actionTypes.DELETE_START:\n      return deleteStart(state, action);\n\n    case actionTypes.DELETE_SUCCESS:\n      return deleteSuccess(state, action);\n\n    case actionTypes.DELETE_FAILED:\n      return deleteFailed(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default phrase;","map":{"version":3,"sources":["/home/niscolinx/projects/roqq/coinb/src/store/reducers/phrase.js"],"names":["actionTypes","update","initialState","error","loading","getAllPhrases","deleteStart","state","action","deleteSuccess","deleted","data","createdAt","deleteFailed","err","putPhraseStart","putPhraseSuccess","putPhrase","id","_id","getPhrase","putPhraseFailed","phrase","type","PUT_PHRASE_START","PUT_PHRASE_SUCCESS","GET_PHRASE_SUCCESS","PUT_PHRASE_FAILED","DELETE_START","DELETE_SUCCESS","DELETE_FAILED"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,OAAOC,MAAP,MAAmB,YAAnB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,IADU;AAEjBC,EAAAA,OAAO,EAAE,KAFQ;AAGjBC,EAAAA,aAAa,EAAE;AAHE,CAArB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,SAAOP,MAAM,CAACM,KAAD,EAAQ;AACjBH,IAAAA,OAAO,EAAE;AADQ,GAAR,CAAb;AAGH,CAJD;;AAKA,MAAMK,aAAa,GAAG,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACrC,SAAOP,MAAM,CAACM,KAAD,EAAQ;AACjBH,IAAAA,OAAO,EAAE,KADQ;AAEjBM,IAAAA,OAAO,EAAEF,MAAM,CAACG,IAAP,CAAYC;AAFJ,GAAR,CAAb;AAIH,CALD;;AAOA,MAAMC,YAAY,GAAG,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACpC,SAAOP,MAAM,CAACM,KAAD,EAAQ;AACjBH,IAAAA,OAAO,EAAE,KADQ;AAEjBD,IAAAA,KAAK,EAAEK,MAAM,CAACM;AAFG,GAAR,CAAb;AAIH,CALD;;AAMA,MAAMC,cAAc,GAAG,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACtC,SAAOP,MAAM,CAACM,KAAD,EAAQ;AACjBH,IAAAA,OAAO,EAAE;AADQ,GAAR,CAAb;AAGH,CAJD;;AAKA,MAAMY,gBAAgB,GAAG,CAACT,KAAD,EAAQC,MAAR,KAAmB;AACxC,SAAOP,MAAM,CAACM,KAAD,EAAQ;AACjBH,IAAAA,OAAO,EAAE,KADQ;AAEjBa,IAAAA,SAAS,EAAET,MAAM,CAACG,IAAP,CAAYC,SAFN;AAGjBM,IAAAA,EAAE,EAAEV,MAAM,CAACG,IAAP,CAAYQ;AAHC,GAAR,CAAb;AAKH,CAND;;AAQA,MAAMd,aAAa,GAAG,CAACE,KAAD,EAAQC,MAAR,KAAmB;AAGrC,SAAOP,MAAM,CAACM,KAAD,EAAQ;AACjBH,IAAAA,OAAO,EAAE,KADQ;AAEjBC,IAAAA,aAAa,EAAEG,MAAM,CAACG,IAAP,CAAYS;AAFV,GAAR,CAAb;AAIH,CAPD;;AAQA,MAAMC,eAAe,GAAG,CAACd,KAAD,EAAQC,MAAR,KAAmB;AACvC,SAAOP,MAAM,CAACM,KAAD,EAAQ;AACjBH,IAAAA,OAAO,EAAE,KADQ;AAEjBD,IAAAA,KAAK,EAAEK,MAAM,CAACM;AAFG,GAAR,CAAb;AAIH,CALD;;AAUA,MAAMQ,MAAM,GAAG,CAACf,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAC7C,UAAQA,MAAM,CAACe,IAAf;AACI,SAAKvB,WAAW,CAACwB,gBAAjB;AACI,aAAOT,cAAc,CAACR,KAAD,EAAQC,MAAR,CAArB;;AACJ,SAAKR,WAAW,CAACyB,kBAAjB;AACI,aAAOT,gBAAgB,CAACT,KAAD,EAAQC,MAAR,CAAvB;;AACJ,SAAKR,WAAW,CAAC0B,kBAAjB;AACI,aAAOrB,aAAa,CAACE,KAAD,EAAQC,MAAR,CAApB;;AACJ,SAAKR,WAAW,CAAC2B,iBAAjB;AACI,aAAON,eAAe,CAACd,KAAD,EAAQC,MAAR,CAAtB;;AACJ,SAAKR,WAAW,CAAC4B,YAAjB;AACI,aAAOtB,WAAW,CAACC,KAAD,EAAQC,MAAR,CAAlB;;AACJ,SAAKR,WAAW,CAAC6B,cAAjB;AACI,aAAOpB,aAAa,CAACF,KAAD,EAAQC,MAAR,CAApB;;AACJ,SAAKR,WAAW,CAAC8B,aAAjB;AACI,aAAOjB,YAAY,CAACN,KAAD,EAAQC,MAAR,CAAnB;;AAGJ;AACI,aAAOD,KAAP;AAlBR;AAoBH,CArBD;;AAuBA,eAAee,MAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes'\nimport update from '../utility'\n\nconst initialState = {\n    error: null,\n    loading: false,\n    getAllPhrases: []\n  \n}\nconst deleteStart = (state, action) => {\n    return update(state, {\n        loading: true,\n    })\n}\nconst deleteSuccess = (state, action) => {\n    return update(state, {\n        loading: false,\n        deleted: action.data.createdAt,\n    })\n}\n\nconst deleteFailed = (state, action) => {\n    return update(state, {\n        loading: false,\n        error: action.err,\n    })\n}\nconst putPhraseStart = (state, action) => {\n    return update(state, {\n        loading: true,\n    })\n}\nconst putPhraseSuccess = (state, action) => {\n    return update(state, {\n        loading: false,\n        putPhrase: action.data.createdAt,\n        id: action.data._id\n    })\n}\n\nconst getAllPhrases = (state, action) => {\n\n    \n    return update(state, {\n        loading: false,\n        getAllPhrases: action.data.getPhrase\n    })\n}\nconst putPhraseFailed = (state, action) => {\n    return update(state, {\n        loading: false,\n        error: action.err\n    })\n}\n\n\n\n\nconst phrase = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.PUT_PHRASE_START:\n            return putPhraseStart(state, action)\n        case actionTypes.PUT_PHRASE_SUCCESS:\n            return putPhraseSuccess(state, action)\n        case actionTypes.GET_PHRASE_SUCCESS:\n            return getAllPhrases(state, action)\n        case actionTypes.PUT_PHRASE_FAILED:\n            return putPhraseFailed(state, action)\n        case actionTypes.DELETE_START:\n            return deleteStart(state, action)\n        case actionTypes.DELETE_SUCCESS:\n            return deleteSuccess(state, action)\n        case actionTypes.DELETE_FAILED:\n            return deleteFailed(state, action)\n       \n\n        default:\n            return state\n    }\n}\n\nexport default phrase\n"]},"metadata":{},"sourceType":"module"}