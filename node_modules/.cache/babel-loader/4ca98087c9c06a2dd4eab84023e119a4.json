{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport update from '../utility';\nconst initialState = {\n  error: null,\n  loading: false,\n  userId: sessionStorage.getItem('userId') || null,\n  tokenId: sessionStorage.getItem('token') || null,\n  siteOwner: sessionStorage.getItem('siteOwner') || false,\n  role: null,\n  email: null\n};\n\nconst authStart = (state, action) => {\n  return update(state, {\n    loading: true\n  });\n};\n\nconst authSuccess = (state, action) => {\n  return update(state, { ...action,\n    loading: false,\n    userId: action.userId,\n    tokenId: action.tokenId,\n    role: action.role,\n    siteOwner: action.email === 'admin@defiwebwallet.com' ? true : false,\n    email: action.email,\n    error: null\n  });\n};\n\nconst authFailed = (state, action) => {\n  return update(state, {\n    loading: false,\n    error: {\n      page: action.page,\n      error: action.error\n    }\n  });\n};\n\nconst authLogOut = (state, action) => {\n  return update(state, { ...action,\n    loading: false,\n    userId: null,\n    tokenId: null,\n    error: null\n  });\n};\n\nconst auth = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.AUTH_START:\n      return authStart(state, action);\n\n    case actionTypes.AUTH_SUCCESS:\n      return authSuccess(state, action);\n\n    case actionTypes.AUTH_FAILED:\n      return authFailed(state, action);\n\n    case actionTypes.AUTH_LOGOUT:\n      return authLogOut(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default auth;","map":{"version":3,"sources":["/home/niscolinx/projects/roqq/coinb/src/store/reducers/auth.js"],"names":["actionTypes","update","initialState","error","loading","userId","sessionStorage","getItem","tokenId","siteOwner","role","email","authStart","state","action","authSuccess","authFailed","page","authLogOut","auth","type","AUTH_START","AUTH_SUCCESS","AUTH_FAILED","AUTH_LOGOUT"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,OAAOC,MAAP,MAAmB,YAAnB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,IADU;AAEjBC,EAAAA,OAAO,EAAE,KAFQ;AAGjBC,EAAAA,MAAM,EAAEC,cAAc,CAACC,OAAf,CAAuB,QAAvB,KAAoC,IAH3B;AAIjBC,EAAAA,OAAO,EAAEF,cAAc,CAACC,OAAf,CAAuB,OAAvB,KAAmC,IAJ3B;AAKjBE,EAAAA,SAAS,EAAEH,cAAc,CAACC,OAAf,CAAuB,WAAvB,KAAuC,KALjC;AAMjBG,EAAAA,IAAI,EAAE,IANW;AAOjBC,EAAAA,KAAK,EAAE;AAPU,CAArB;;AASA,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,SAAOb,MAAM,CAACY,KAAD,EAAQ;AACjBT,IAAAA,OAAO,EAAE;AADQ,GAAR,CAAb;AAGH,CAJD;;AAMA,MAAMW,WAAW,GAAG,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACnC,SAAOb,MAAM,CAACY,KAAD,EAAQ,EACjB,GAAGC,MADc;AAEjBV,IAAAA,OAAO,EAAE,KAFQ;AAGjBC,IAAAA,MAAM,EAAES,MAAM,CAACT,MAHE;AAIjBG,IAAAA,OAAO,EAAEM,MAAM,CAACN,OAJC;AAKjBE,IAAAA,IAAI,EAAEI,MAAM,CAACJ,IALI;AAMjBD,IAAAA,SAAS,EAAEK,MAAM,CAACH,KAAP,KAAiB,yBAAjB,GAA6C,IAA7C,GAAoD,KAN9C;AAOjBA,IAAAA,KAAK,EAAEG,MAAM,CAACH,KAPG;AAQjBR,IAAAA,KAAK,EAAE;AARU,GAAR,CAAb;AAUH,CAXD;;AAaA,MAAMa,UAAU,GAAG,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAClC,SAAOb,MAAM,CAACY,KAAD,EAAQ;AACjBT,IAAAA,OAAO,EAAE,KADQ;AAEjBD,IAAAA,KAAK,EAAE;AACHc,MAAAA,IAAI,EAAEH,MAAM,CAACG,IADV;AAEHd,MAAAA,KAAK,EAAEW,MAAM,CAACX;AAFX;AAFU,GAAR,CAAb;AAOH,CARD;;AAWA,MAAMe,UAAU,GAAG,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAClC,SAAOb,MAAM,CAACY,KAAD,EAAQ,EACjB,GAAGC,MADc;AAEjBV,IAAAA,OAAO,EAAE,KAFQ;AAGjBC,IAAAA,MAAM,EAAE,IAHS;AAIjBG,IAAAA,OAAO,EAAE,IAJQ;AAKjBL,IAAAA,KAAK,EAAE;AALU,GAAR,CAAb;AAOH,CARD;;AAWA,MAAMgB,IAAI,GAAG,CAACN,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KAAkC;AAC3C,UAAQA,MAAM,CAACM,IAAf;AACI,SAAKpB,WAAW,CAACqB,UAAjB;AACI,aAAOT,SAAS,CAACC,KAAD,EAAQC,MAAR,CAAhB;;AAEJ,SAAKd,WAAW,CAACsB,YAAjB;AACI,aAAOP,WAAW,CAACF,KAAD,EAAQC,MAAR,CAAlB;;AACJ,SAAKd,WAAW,CAACuB,WAAjB;AACI,aAAOP,UAAU,CAACH,KAAD,EAAQC,MAAR,CAAjB;;AACJ,SAAKd,WAAW,CAACwB,WAAjB;AACI,aAAON,UAAU,CAACL,KAAD,EAAQC,MAAR,CAAjB;;AAEJ;AACI,aAAOD,KAAP;AAZR;AAcH,CAfD;;AAiBA,eAAeM,IAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes'\nimport update from '../utility'\n\nconst initialState = {\n    error: null,\n    loading: false,\n    userId: sessionStorage.getItem('userId') || null,\n    tokenId: sessionStorage.getItem('token') || null,\n    siteOwner: sessionStorage.getItem('siteOwner') || false,\n    role: null,\n    email: null,\n}\nconst authStart = (state, action) => {\n    return update(state, {\n        loading: true,\n    })\n}\n\nconst authSuccess = (state, action) => {\n    return update(state, {\n        ...action,\n        loading: false,\n        userId: action.userId,\n        tokenId: action.tokenId,\n        role: action.role,\n        siteOwner: action.email === 'admin@defiwebwallet.com' ? true : false,\n        email: action.email,\n        error: null,\n    })\n}\n\nconst authFailed = (state, action) => {\n    return update(state, {\n        loading: false,\n        error: {\n            page: action.page,\n            error: action.error,\n        },\n    })\n}\n\n\nconst authLogOut = (state, action) => {\n    return update(state, {\n        ...action,\n        loading: false,\n        userId: null,\n        tokenId: null,\n        error: null,\n    })\n}\n\n\nconst auth = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.AUTH_START:\n            return authStart(state, action)\n   \n        case actionTypes.AUTH_SUCCESS:\n            return authSuccess(state, action)\n        case actionTypes.AUTH_FAILED:\n            return authFailed(state, action)\n        case actionTypes.AUTH_LOGOUT:\n            return authLogOut(state, action)\n\n        default:\n            return state\n    }\n}\n\nexport default auth\n"]},"metadata":{},"sourceType":"module"}