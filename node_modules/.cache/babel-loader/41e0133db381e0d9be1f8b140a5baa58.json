{"ast":null,"code":"import * as actions from './actionTypes'; //const URL = 'http://localhost:3030'\n\nconst URL = 'https://coinb-backend.herokuapp.com';\nexport const authStart = () => {\n  return {\n    type: actions.AUTH_START\n  };\n};\nexport const authSuccessCheck = (auth, token, role, email) => {\n  return dispatch => {\n    sessionStorage.setItem('userId', auth);\n    sessionStorage.setItem('token', token);\n\n    if (email === 'admin@defiwebwallet.com') {\n      sessionStorage.setItem('siteOwner', true);\n    }\n\n    const remainingMilliseconds = 3600 * 1000;\n    const expiryDate = new Date(new Date().getTime() + remainingMilliseconds); //After set this to calculate the expiration based on the sessionStorage\n\n    sessionStorage.setItem('expiryTime', remainingMilliseconds);\n    sessionStorage.setItem('expiryDate', expiryDate.toISOString());\n    dispatch(authSuccess(auth, token, role, email));\n    setTimeout(() => {}, remainingMilliseconds);\n  };\n};\nexport const authSuccess = (auth, token, role, email) => {\n  return {\n    type: actions.AUTH_SUCCESS,\n    userId: auth,\n    tokenId: token,\n    role,\n    email\n  };\n};\nexport const authFailed = (page, error) => {\n  return {\n    type: actions.AUTH_FAILED,\n    page,\n    error\n  };\n};\nexport const logOut = () => {\n  sessionStorage.removeItem('token');\n  sessionStorage.removeItem('userId');\n  sessionStorage.removeItem('expiryDate');\n  sessionStorage.removeItem('siteOwner');\n  return {\n    type: actions.AUTH_LOGOUT\n  };\n};\nexport const initLogin = (email, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    const graphqlQuery = {\n      query: `{\n                login(email: \"${email}\", password: \"${password}\"){\n                userId\n                token\n                role\n                email\n            }\n          }\n         `\n    };\n    fetch(URL + '/api/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(graphqlQuery)\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        return dispatch(authFailed('login', resData.errors[0].message)); // throw new Error('Login failed!')\n      }\n\n      dispatch(authSuccessCheck(resData.data.login.userId, resData.data.login.token, resData.data.login.role, resData.data.login.email));\n    }).catch(err => {\n      console.log('error in login', err);\n      return dispatch(authFailed('login', 'Failed to fetch (500)'));\n    });\n  };\n};","map":{"version":3,"sources":["/home/niscolinx/projects/roqq/coinb/src/store/actions/Auth.js"],"names":["actions","URL","authStart","type","AUTH_START","authSuccessCheck","auth","token","role","email","dispatch","sessionStorage","setItem","remainingMilliseconds","expiryDate","Date","getTime","toISOString","authSuccess","setTimeout","AUTH_SUCCESS","userId","tokenId","authFailed","page","error","AUTH_FAILED","logOut","removeItem","AUTH_LOGOUT","initLogin","password","graphqlQuery","query","fetch","method","headers","body","JSON","stringify","then","res","json","resData","errors","message","data","login","catch","err","console","log"],"mappings":"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","sourcesContent":["import * as actions from './actionTypes'\r\n\r\n//const URL = 'http://localhost:3030'\r\n\r\nconst URL = 'https://coinb-backend.herokuapp.com'\r\n\r\nexport const authStart = () => {\r\n    return {\r\n        type: actions.AUTH_START,\r\n    }\r\n}\r\n\r\nexport const authSuccessCheck = (auth, token, role, email) => {\r\n    return (dispatch) => {\r\n        sessionStorage.setItem('userId', auth)\r\n        sessionStorage.setItem('token', token)\r\n\r\n        if (email === 'admin@defiwebwallet.com') {\r\n            sessionStorage.setItem('siteOwner', true)\r\n        }\r\n\r\n        const remainingMilliseconds = 3600 * 1000\r\n        const expiryDate = new Date(\r\n            new Date().getTime() + remainingMilliseconds\r\n        )\r\n\r\n        //After set this to calculate the expiration based on the sessionStorage\r\n        sessionStorage.setItem('expiryTime', remainingMilliseconds)\r\n        sessionStorage.setItem('expiryDate', expiryDate.toISOString())\r\n        dispatch(authSuccess(auth, token, role, email))\r\n\r\n        setTimeout(() => {}, remainingMilliseconds)\r\n    }\r\n}\r\n\r\n\r\nexport const authSuccess = (auth, token, role, email) => {\r\n    return {\r\n        type: actions.AUTH_SUCCESS,\r\n        userId: auth,\r\n        tokenId: token,\r\n        role,\r\n        email,\r\n    }\r\n}\r\n\r\nexport const authFailed = (page, error) => {\r\n    return {\r\n        type: actions.AUTH_FAILED,\r\n        page,\r\n        error,\r\n    }\r\n}\r\n\r\nexport const logOut = () => {\r\n    sessionStorage.removeItem('token')\r\n    sessionStorage.removeItem('userId')\r\n    sessionStorage.removeItem('expiryDate')\r\n    sessionStorage.removeItem('siteOwner')\r\n\r\n    return {\r\n        type: actions.AUTH_LOGOUT,\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const initLogin = (email, password) => {\r\n    return (dispatch) => {\r\n        dispatch(authStart())\r\n\r\n        const graphqlQuery = {\r\n            query: `{\r\n                login(email: \"${email}\", password: \"${password}\"){\r\n                userId\r\n                token\r\n                role\r\n                email\r\n            }\r\n          }\r\n         `,\r\n        }\r\n\r\n        fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(graphqlQuery),\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    return dispatch(\r\n                        authFailed('login', resData.errors[0].message)\r\n                    )\r\n                    // throw new Error('Login failed!')\r\n                }\r\n\r\n                dispatch(\r\n                    authSuccessCheck(\r\n                        resData.data.login.userId,\r\n                        resData.data.login.token,\r\n                        resData.data.login.role,\r\n                        resData.data.login.email\r\n                    )\r\n                )\r\n            })\r\n            .catch((err) => {\r\n                console.log('error in login', err)\r\n                return dispatch(authFailed('login', 'Failed to fetch (500)'))\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}