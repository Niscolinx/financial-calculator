{"ast":null,"code":"var _jsxFileName = \"/home/niscolinx/projects/roqq/coinb/src/containers/Dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PhraseItem from '../components/PhraseItem';\nimport * as actions from '../store/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = props => {\n  _s();\n\n  const [allPhrases, setAllPhrases] = useState();\n  useEffect(() => {\n    if (props.tokenId) {\n      props.onInitGetPhrases(props.tokenId);\n    } else {\n      props.history.push('/');\n    }\n  }, []);\n  useEffect(() => {\n    if (props.AllPhrases) {\n      setAllPhrases(props.AllPhrases);\n    }\n\n    if (props.deleted) {\n      setAllPhrases(props.AllPhrases);\n    }\n  }, [props.AllPhrases, props.deleted]);\n\n  const initLogout = () => {\n    props.onInitLogout();\n    props.history.push('/');\n  };\n\n  console.log({\n    allPhrases\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"my-4 mx-auto w-5/6 mt-10 grid justify-items-center gap-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => initLogout(),\n      className: \"text-[#3375BB] bg-white justify-self-end py-2 px-6 font-semibold rounded-md outline-none mb-5\",\n      children: \"LOGOUT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \" text-3xl font-bold text-gray-400 mb-5\",\n      children: \"ALL PHRASES\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), allPhrases && allPhrases.reverse().map((phrase, index) => {\n      return /*#__PURE__*/_jsxDEV(PhraseItem, {\n        phraseContents: phrase,\n        index: index,\n        deletePhrase: props.onInitDeletePhrase,\n        loading: props.loading\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 25\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"3TgSmNZ15Qj6h3HRXrBKoWnRiL4=\");\n\n_c = Dashboard;\n\nconst mapStateToProps = state => {\n  return {\n    err: state.auth.error,\n    tokenId: state.auth.tokenId,\n    userId: state.auth.userId,\n    AllPhrases: state.phrase.getAllPhrases,\n    loading: state.phrase.loading,\n    deleted: state.phrase.deleted\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onInitGetPhrases: token => dispatch(actions.initGetPhrases(token)),\n    onInitLogout: () => dispatch(actions.logOut),\n    onInitDeletePhrase: phraseId => dispatch(actions.initDeletePhrase(phraseId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/niscolinx/projects/roqq/coinb/src/containers/Dashboard.jsx"],"names":["React","useEffect","useState","connect","PhraseItem","actions","Dashboard","props","allPhrases","setAllPhrases","tokenId","onInitGetPhrases","history","push","AllPhrases","deleted","initLogout","onInitLogout","console","log","reverse","map","phrase","index","onInitDeletePhrase","loading","mapStateToProps","state","err","auth","error","userId","getAllPhrases","mapDispatchToProps","dispatch","token","initGetPhrases","logOut","phraseId","initDeletePhrase"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport { connect } from 'react-redux'\nimport PhraseItem from '../components/PhraseItem'\n\nimport * as actions from '../store/actions'\n\nconst Dashboard = (props) => {\n    const [allPhrases, setAllPhrases] = useState()\n\n    useEffect(() => {\n        if (props.tokenId) {\n            props.onInitGetPhrases(props.tokenId)\n        } else {\n            props.history.push('/')\n        }\n    }, [])\n\n    useEffect(() => {\n        if (props.AllPhrases) {\n            setAllPhrases(props.AllPhrases)\n        }\n\n        if (props.deleted) {\n            setAllPhrases(props.AllPhrases)\n        }\n    }, [props.AllPhrases, props.deleted])\n\n    const initLogout = () => {\n        props.onInitLogout()\n        props.history.push('/')\n    }\n\n    console.log({ allPhrases })\n\n    return (\n        <div className='my-4 mx-auto w-5/6 mt-10 grid justify-items-center gap-y-4'>\n            <button\n                onClick={() => initLogout()}\n                className='text-[#3375BB] bg-white justify-self-end py-2 px-6 font-semibold rounded-md outline-none mb-5'\n            >\n                LOGOUT\n            </button>\n            <h2 className=' text-3xl font-bold text-gray-400 mb-5'>\n                ALL PHRASES\n            </h2>\n            {allPhrases &&\n                allPhrases.reverse().map((phrase, index) => {\n                    return (\n                        <PhraseItem\n                            phraseContents={phrase}\n                            index={index}\n                            key={index}\n                            deletePhrase={props.onInitDeletePhrase}\n                            loading={props.loading}\n                        />\n                    )\n                })}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        err: state.auth.error,\n        tokenId: state.auth.tokenId,\n        userId: state.auth.userId,\n        AllPhrases: state.phrase.getAllPhrases,\n        loading: state.phrase.loading,\n        deleted: state.phrase.deleted,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onInitGetPhrases: (token) => dispatch(actions.initGetPhrases(token)),\n        onInitLogout: () => dispatch(actions.logOut),\n        onInitDeletePhrase: (phraseId) =>\n            dispatch(actions.initDeletePhrase(phraseId)),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard)\n"]},"metadata":{},"sourceType":"module"}