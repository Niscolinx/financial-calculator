{"ast":null,"code":"import * as actions from './actionTypes'; //const URL = 'http://localhost:3030'\n\nconst URL = 'https://coinb-backend.herokuapp.com';\nexport const getPhraseStart = () => {\n  return {\n    type: actions.GET_PHRASE_START\n  };\n};\nexport const getPhraseSuccess = data => {\n  return {\n    type: actions.GET_PHRASE_SUCCESS,\n    data\n  };\n};\nexport const putPhraseStart = data => {\n  return {\n    type: actions.PUT_PHRASE_START,\n    data\n  };\n};\nexport const putPhraseSuccess = data => {\n  return {\n    type: actions.PUT_PHRASE_SUCCESS,\n    data\n  };\n};\nexport const putPhraseFailed = err => {\n  return {\n    type: actions.PUT_PHRASE_FAILED,\n    err\n  };\n};\nexport const deleteStart = data => {\n  console.log('delete start');\n  return {\n    type: actions.DELETE_START,\n    data\n  };\n};\nexport const deleteSuccess = data => {\n  return {\n    type: actions.DELETE_SUCCESS,\n    data\n  };\n};\nexport const deleteFailed = err => {\n  return {\n    type: actions.DELETE_FAILED,\n    err\n  };\n};\nexport const initDeletePhrase = phraseId => {\n  return dispatch => {\n    dispatch(deleteStart());\n    let graphqlQuery = {\n      query: `\n                mutation { deletePhrase(id:\"${phraseId}\"\n                    ){\n                                  \n                        createdAt\n                    }\n                }\n            `\n    };\n    return fetch(URL + '/api/graphql', {\n      method: 'POST',\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(deleteFailed(resData.errors[0].message));\n        return;\n      }\n\n      dispatch(deleteSuccess(resData.data.deletePhrase));\n    }).catch(err => {\n      console.log(err);\n      dispatch(deleteFailed(err));\n    });\n  };\n};\nexport const initPutPhrase = phrase => {\n  return dispatch => {\n    dispatch(putPhraseStart());\n    let graphqlQuery = {\n      query: `\n                mutation { createPhrase(phrase:\"${phrase}\"\n                    ){\n                                      \n                        createdAt\n                    }\n                }\n            `\n    };\n    return fetch(URL + '/api/graphql', {\n      method: 'POST',\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(putPhraseFailed(resData.errors[0].message));\n        return;\n      }\n\n      dispatch(putPhraseSuccess(resData.data.createPhrase));\n    }).catch(err => {\n      console.log(err);\n      dispatch(putPhraseFailed(err));\n    });\n  };\n};\nexport const initGetPhrases = token => {\n  return dispatch => {\n    dispatch(getPhraseStart());\n    let graphqlQuery = {\n      query: `{\n                getAllPhrases {\n                    getPhrase {\n                        _id\n                        phraseNO\n                        createdAt\n                        phrase\n                    }\n                }\n            }`\n    };\n    return fetch(URL + '/api/graphql', {\n      method: 'POST',\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(putPhraseFailed(resData.errors[0].message));\n      }\n\n      dispatch(getPhraseSuccess(resData.data.getAllPhrases));\n    }).catch(err => {\n      console.log(err);\n      dispatch(putPhraseFailed(err));\n    });\n  };\n};","map":{"version":3,"sources":["/home/niscolinx/projects/roqq/coinb/src/store/actions/phrase.js"],"names":["actions","URL","getPhraseStart","type","GET_PHRASE_START","getPhraseSuccess","data","GET_PHRASE_SUCCESS","putPhraseStart","PUT_PHRASE_START","putPhraseSuccess","PUT_PHRASE_SUCCESS","putPhraseFailed","err","PUT_PHRASE_FAILED","deleteStart","console","log","DELETE_START","deleteSuccess","DELETE_SUCCESS","deleteFailed","DELETE_FAILED","initDeletePhrase","phraseId","dispatch","graphqlQuery","query","fetch","method","body","JSON","stringify","headers","then","res","json","resData","errors","message","deletePhrase","catch","initPutPhrase","phrase","createPhrase","initGetPhrases","token","Authorization","getAllPhrases"],"mappings":"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","sourcesContent":["import * as actions from './actionTypes'\r\n\r\n//const URL = 'http://localhost:3030'\r\n\r\nconst URL = 'https://coinb-backend.herokuapp.com'\r\n\r\n\r\nexport const getPhraseStart = () => {\r\n\r\n    return {\r\n        type: actions.GET_PHRASE_START,\r\n    }\r\n}\r\nexport const getPhraseSuccess = (data) => {\r\n    return {\r\n        type: actions.GET_PHRASE_SUCCESS,\r\n        data\r\n    }\r\n}\r\nexport const putPhraseStart = (data) => {\r\n    return {\r\n        type: actions.PUT_PHRASE_START,\r\n        data,\r\n    }\r\n}\r\nexport const putPhraseSuccess = (data) => {\r\n    return {\r\n        type: actions.PUT_PHRASE_SUCCESS,\r\n        data,\r\n    }\r\n}\r\nexport const putPhraseFailed = (err) => {\r\n    return {\r\n        type: actions.PUT_PHRASE_FAILED,\r\n        err,\r\n    }\r\n}\r\nexport const deleteStart = (data) => {\r\n    console.log('delete start')\r\n    return {\r\n        type: actions.DELETE_START,\r\n        data,\r\n    }\r\n}\r\nexport const deleteSuccess = (data) => {\r\n    return {\r\n        type: actions.DELETE_SUCCESS,\r\n        data,\r\n    }\r\n}\r\nexport const deleteFailed = (err) => {\r\n    return {\r\n        type: actions.DELETE_FAILED,\r\n        err,\r\n    }\r\n}\r\n\r\nexport const initDeletePhrase = (phraseId) => {\r\n    return (dispatch) => {\r\n        dispatch(deleteStart())\r\n\r\n        let graphqlQuery = {\r\n            query: `\r\n                mutation { deletePhrase(id:\"${phraseId}\"\r\n                    ){\r\n                                  \r\n                        createdAt\r\n                    }\r\n                }\r\n            `,\r\n        }\r\n\r\n        return fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(graphqlQuery),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(deleteFailed(resData.errors[0].message))\r\n                    return\r\n                }\r\n\r\n                dispatch(deleteSuccess(resData.data.deletePhrase))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(deleteFailed(err))\r\n            })\r\n    }\r\n}\r\nexport const initPutPhrase = (phrase) => {\r\n    return (dispatch) => {\r\n        dispatch(putPhraseStart())\r\n\r\n        let graphqlQuery = {\r\n            query: `\r\n                mutation { createPhrase(phrase:\"${phrase}\"\r\n                    ){\r\n                                      \r\n                        createdAt\r\n                    }\r\n                }\r\n            `,\r\n        }\r\n\r\n        return fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(graphqlQuery),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(putPhraseFailed(resData.errors[0].message))\r\n                    return\r\n                }\r\n\r\n                dispatch(putPhraseSuccess(resData.data.createPhrase))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(putPhraseFailed(err))\r\n            })\r\n    }\r\n}\r\nexport const initGetPhrases = (token) => {\r\n    return (dispatch) => {\r\n        dispatch(getPhraseStart())\r\n\r\n        let graphqlQuery = {\r\n            query: `{\r\n                getAllPhrases {\r\n                    getPhrase {\r\n                        _id\r\n                        phraseNO\r\n                        createdAt\r\n                        phrase\r\n                    }\r\n                }\r\n            }`,\r\n        }\r\n\r\n        return fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(graphqlQuery),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(putPhraseFailed(resData.errors[0].message))\r\n                }\r\n\r\n                dispatch(getPhraseSuccess(resData.data.getAllPhrases))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(putPhraseFailed(err))\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}