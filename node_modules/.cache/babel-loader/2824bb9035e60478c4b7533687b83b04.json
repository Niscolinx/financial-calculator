{"ast":null,"code":"var _jsxFileName = \"/home/niscolinx/projects/roqq/roqquappchat/src/containers/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as actions from '../store/actions';\nimport Home from './Home';\nimport Dashboard from './Dashboard';\nimport LoginPage from './Login';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  console.log('update');\n  const ref = useRef();\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('userId');\n\n    if (!ref.current) {\n      if (token) {\n        props.onCheckState(token, userId);\n      }\n    }\n\n    ref.current = true;\n  }, [props]);\n\n  let AuthGuard = /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      exact: true,\n      component: Home\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/Auth/login\",\n      component: LoginPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n\n  if (props.auth) {\n    AuthGuard = /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        component: Home\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/Auth/login\",\n        render: props => /*#__PURE__*/_jsxDEV(LoginPage, { ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 40\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/admin\",\n        render: props => /*#__PURE__*/_jsxDEV(Dashboard, { ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 40\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), ' ', /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rootApp\",\n    children: AuthGuard\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 12\n  }, this);\n}\n\n_s(App, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c = App;\n\nconst mapStateToProps = state => {\n  return {\n    siteOwner: state.auth.siteOwner,\n    auth: state.auth.tokenId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onCheckState: (tokenId, userId) => dispatch(actions.authSuccess(tokenId, userId))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/niscolinx/projects/roqq/roqquappchat/src/containers/App.js"],"names":["React","useEffect","useRef","Switch","Route","Redirect","withRouter","connect","actions","Home","Dashboard","LoginPage","App","props","console","log","ref","token","localStorage","getItem","userId","current","onCheckState","AuthGuard","auth","mapStateToProps","state","siteOwner","tokenId","mapDispatchToProps","dispatch","authSuccess"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport {\n    Switch,\n    Route,\n    Redirect,\n    withRouter,\n} from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../store/actions'\nimport Home from './Home'\nimport Dashboard from './Dashboard'\n\nimport LoginPage from './Login'\n\nfunction App(props) {\n    console.log('update')\n    const ref = useRef()\n    useEffect(() => {\n        const token = localStorage.getItem('token')\n        const userId = localStorage.getItem('userId')\n        if (!ref.current) {\n            if (token) {\n                props.onCheckState(token, userId)\n            } \n        }\n        ref.current = true\n    }, [props])\n\n    let AuthGuard = (\n        <Switch>\n            <Route\n                path='/'\n                exact\n                component={Home}\n            />\n            <Route\n                path='/Auth/login'\n                component={LoginPage}\n            />\n\n            <Redirect to='/' />\n        </Switch>\n    )\n    if (props.auth) {\n        AuthGuard = (\n            <Switch>\n                <Route path='/' exact component={Home} />\n                <Route\n                    path='/Auth/login'\n                    render={(props) => <LoginPage {...props} />}\n                />\n                <Route\n                    path='/admin'\n                    render={(props) => <Dashboard {...props} />}\n                />{' '}\n                <Redirect to='/' />\n            </Switch>\n        )\n    }\n\n    return <div className='rootApp'>{AuthGuard}</div>\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        siteOwner: state.auth.siteOwner,\n        auth: state.auth.tokenId,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onCheckState: (tokenId, userId) =>\n            dispatch(actions.authSuccess(tokenId, userId)),\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App))\n"]},"metadata":{},"sourceType":"module"}